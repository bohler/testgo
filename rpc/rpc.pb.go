// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Req
	Rsp
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Rsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Resp string `protobuf:"bytes,2,opt,name=resp" json:"resp,omitempty"`
}

func (m *Rsp) Reset()                    { *m = Rsp{} }
func (m *Rsp) String() string            { return proto.CompactTextString(m) }
func (*Rsp) ProtoMessage()               {}
func (*Rsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Rsp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Rsp) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "example.Req")
	proto.RegisterType((*Rsp)(nil), "example.Rsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceTest service

type ServiceTestClient interface {
	SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	Crazy(ctx context.Context, opts ...grpc.CallOption) (ServiceTest_CrazyClient, error)
}

type serviceTestClient struct {
	cc *grpc.ClientConn
}

func NewServiceTestClient(cc *grpc.ClientConn) ServiceTestClient {
	return &serviceTestClient{cc}
}

func (c *serviceTestClient) SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := grpc.Invoke(ctx, "/example.ServiceTest/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTestClient) Crazy(ctx context.Context, opts ...grpc.CallOption) (ServiceTest_CrazyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceTest_serviceDesc.Streams[0], c.cc, "/example.ServiceTest/Crazy", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceTestCrazyClient{stream}
	return x, nil
}

type ServiceTest_CrazyClient interface {
	Send(*Req) error
	Recv() (*Rsp, error)
	grpc.ClientStream
}

type serviceTestCrazyClient struct {
	grpc.ClientStream
}

func (x *serviceTestCrazyClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceTestCrazyClient) Recv() (*Rsp, error) {
	m := new(Rsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceTest service

type ServiceTestServer interface {
	SayHello(context.Context, *Req) (*Rsp, error)
	Crazy(ServiceTest_CrazyServer) error
}

func RegisterServiceTestServer(s *grpc.Server, srv ServiceTestServer) {
	s.RegisterService(&_ServiceTest_serviceDesc, srv)
}

func _ServiceTest_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTestServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ServiceTest/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTestServer).SayHello(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTest_Crazy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceTestServer).Crazy(&serviceTestCrazyServer{stream})
}

type ServiceTest_CrazyServer interface {
	Send(*Rsp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type serviceTestCrazyServer struct {
	grpc.ServerStream
}

func (x *serviceTestCrazyServer) Send(m *Rsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceTestCrazyServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.ServiceTest",
	HandlerType: (*ServiceTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ServiceTest_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Crazy",
			Handler:       _ServiceTest_Crazy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x55, 0x92,
	0xe4, 0x62, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x74, 0xb9, 0x98, 0x83, 0x8a, 0x0b, 0x40, 0x52, 0xc9,
	0xf9, 0x29, 0x10, 0x29, 0xde, 0x20, 0x30, 0x1b, 0x24, 0x56, 0x94, 0x5a, 0x5c, 0x20, 0xc1, 0x04,
	0x51, 0x0e, 0x62, 0x1b, 0x25, 0x71, 0x71, 0x07, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x86, 0xa4,
	0x16, 0x97, 0x08, 0x69, 0x70, 0x71, 0x04, 0x27, 0x56, 0x7a, 0xa4, 0xe6, 0xe4, 0xe4, 0x0b, 0xf1,
	0xe8, 0x41, 0xad, 0xd3, 0x0b, 0x4a, 0x2d, 0x94, 0x42, 0xe2, 0x15, 0x17, 0x28, 0x31, 0x08, 0x69,
	0x72, 0xb1, 0x3a, 0x17, 0x25, 0x56, 0x55, 0xe2, 0x57, 0xa6, 0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06,
	0x76, 0xbd, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x03, 0xb0, 0xf3, 0x4d, 0xca, 0x00, 0x00, 0x00,
}
